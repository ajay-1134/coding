***CPP***

To read a line including spaces 
string s;
getline(cin,s);


if amount of data is unknown following loop is useful
while(cin>>x){
    //code
}


In some contest systems, files are used for input and output. An easy solution
for this is to write the code as usual using standard streams, but add the following
lines to the beginning of the code:
freopen("input.txt", "r", stdin);
freopen("output.txt", "w", stdout);
After this, the program reads the input from the file ”input.txt” and writes the
output to the file ”output.txt”.




Usually we want the remainder to always be between 0 . . . m − 1. However, in
C++ and other languages, the remainder of a negative number is either zero or
negative. An easy way to make sure there are no negative remainders is to first
calculate the remainder as usual and then add m if the result is negative:
x = x%m;
if (x < 0) x += m;
However, this is only needed when there are subtractions in the code and the
remainder may become negative.





It is risky to compare floating point numbers with the == operator, because it
is possible that the values should be equal but they are not because of precision
errors. A better way to compare floating point numbers is to assume that two
numbers are equal if the difference between them is less than ε , where ε is a
small number.
In practice, the numbers can be compared as follows ( ε = 10 − 9 ):
if (abs(a-b) < 1e-9) {
// a and b are equal
}
Note that while floating point numbers are inaccurate, integers up to a certain
limit can still be represented accurately. For example, using double , it is possible
to accurately represent all integers whose absolute value is at most 2 53 .
